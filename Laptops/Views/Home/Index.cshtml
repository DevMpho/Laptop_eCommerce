@{
    ViewData["Title"] = "Home";
    var featured = ViewBag.Featured as Laptops.Models.Product;
    var devList = ViewBag.DevCreators as List<Laptops.Models.Product>;
    var officeList = ViewBag.BusinessOffice as List<Laptops.Models.Product>;
}
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />

    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css" integrity="sha512-dFfdf3dcZm+lHz6UcJ57Vn3ep1Zk9O9bDcyL+G8XvF/7qFo2RpT3oPfFnqC5V1NHHc6X3sBYY2zD9K+3z1Bx9A==" crossorigin="anonymous" referrerpolicy="no-referrer" />
</head>
<div >
    @Html.Partial("_NavBar")
</div>
<div>
    <div class="bg-gradient-to-b from-[#1F44BB] via-[#EEF3FF] to-white py-20">
        <div class="max-w-7xl mx-auto px-6 md:px-12 grid md:grid-cols-2 gap-12 items-center">

            <!-- Left Column: Hero Content -->
            <div class="space-y-6 text-white md:text-gray-900">
                <h1 class="text-4xl md:text-5xl font-extrabold leading-tight">
                    MintGroup Device Exchange
                </h1>
                <p class="text-lg">
                    Your trusted space to view pre-owned, <span class="text-[#73AC4B] font-semibold">IT-approved laptops</span>.
                    Every device is verified. Every listing is limited.
                </p>

                <!-- Search Bar -->
                <div class="relative w-full md:w-96">
                    <svg class="absolute left-4 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-500 z-10"
                         xmlns="http://www.w3.org/2000/svg" fill="none" stroke="currentColor" stroke-width="2"
                         viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round"
                              d="M21 21l-4.35-4.35M16.5 9.75A6.75 6.75 0 1 1 9.75 16.5A6.75 6.75 0 0 1 16.5 9.75z" />
                    </svg>
                    <input type="text"
                           placeholder="Search by brand, RAM, or keyword..."
                           class="pl-12 pr-4 py-3 w-full border border-gray-300 rounded-full shadow-sm focus:ring-2 focus:ring-[#1F44BB] focus:outline-none text-sm placeholder-gray-500" />
                </div>

                <p class="text-sm text-gray-100 md:text-gray-500 italic mt-2">
                    MintGroup internal use only
                </p>
            </div>

            <!-- Right Column: Featured Product -->
            <div class="bg-white rounded-2xl p-6 shadow-lg max-w-md w-full mx-auto">
                <div class="space-y-4 text-center md:text-left">
                    <img src="/images/legion1.jpg" alt="Lenovo Legion 5"
                         class="w-full h-auto rounded-xl object-contain transition-transform duration-300 hover:scale-105" />

                    <h2 class="text-xl font-bold text-[#1F44BB]">Lenovo Legion 5</h2>

                    <p class="text-sm text-gray-600 leading-relaxed">
                        📝 Gen Intel Core i5 with NVIDIA GeForce RTX 3050<br />
                        💾 <span class="font-medium text-[#1F44BB]">RAM:</span> 16GB DDR5<br />
                        💽 <span class="font-medium text-[#1F44BB]">Storage:</span> 512GB SSD
                    </p>

                    <p class="text-lg font-bold text-[#73AC4B]">R 5000</p>

                    <a asp-action="LaptopDetails"
                       class="inline-flex items-center justify-center px-5 py-2 bg-[#1F44BB] hover:bg-blue-900 text-white font-semibold rounded-full shadow transition duration-300 ease-in-out">
                        View Details
                        <svg class="w-4 h-4 ml-2" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" d="M9 5l7 7-7 7" />
                        </svg>
                    </a>
                </div>
            </div>

        </div>
    </div>

    <div class="max-w-7xl mx-auto mt-10 px-4">
        <!-- Filters & Sort -->
        <div class="flex flex-wrap items-center justify-between gap-4 p-6 bg-white rounded-2xl shadow-md mt-10 mb-6 border border-gray-200">
            <!-- Filters -->
            <div class="flex flex-wrap items-center gap-6">
                <div class="flex flex-col">
                    <label for="brand" class="text-sm font-semibold text-gray-700">Brand</label>
                    <select id="brandFilter" class="px-3 py-2 border rounded-md text-sm focus:ring-2 focus:ring-[#1F44BB]">
                        <option value="">All</option>
                        <option value="Lenovo">Lenovo</option>
                        <option value="Dell">Dell</option>
                        <option value="HP">HP</option>
                        <option value="ASUS">ASUS</option>
                        <option value="Legion">Legion</option>
                    </select>
                </div>
                <div class="flex flex-col">
                    <label for="ram" class="text-sm font-semibold text-gray-700">RAM</label>
                    <select id="ramFilter" class="px-3 py-2 border rounded-md text-sm focus:ring-2 focus:ring-[#1F44BB]">
                        <option value="">All</option>
                        <option value="4GB">4GB</option>
                        <option value="8GB">8GB</option>
                        <option value="16GB">16GB</option>
                        <option value="32GB">32GB</option>
                    </select>
                </div>
            </div>

            <!-- Sort -->
            <div class="flex flex-col">
                <label for="sort" class="text-sm font-semibold text-gray-700">Sort by</label>
                <select id="sortSelect" class="px-3 py-2 border rounded-md text-sm focus:ring-2 focus:ring-[#73AC4B]">
                    <option value="default">Default</option>
                    <option value="price-low-high">Price: Low to High</option>
                    <option value="price-high-low">Price: High to Low</option>
                    <option value="name-asc">Name: A-Z</option>
                    <option value="name-desc">Name: Z-A</option>
                </select>
            </div>
        </div>

        <!-- Developers and Creators -->
        <h3 class="text-2xl font-bold text-[#1F44BB] mb-4">Developers And Creators</h3>
        <div class="grid md:grid-cols-3 gap-6" id="devCreatorsSection">
            @foreach (var laptop in devList)
            {
                @Html.Partial("_LaptopCard", laptop)
            }
        </div>

        <!-- Business and Office -->
        <h3 class="text-2xl font-bold text-[#1F44BB] mt-10 mb-4">Business And Office</h3>
        <div class="grid md:grid-cols-3 gap-6" id="businessOfficeSection">
            @foreach (var laptop in officeList)
            {
                @Html.Partial("_LaptopCard", laptop)
            }
        </div>
    </div>
</div>

<script>
    const searchInput = document.querySelector('input[placeholder*="Search"]');
    const brandFilter = document.getElementById("brandFilter");
    const ramFilter = document.getElementById("ramFilter");
    const sortSelect = document.getElementById("sortSelect");

    const sections = ["devCreatorsSection", "businessOfficeSection"];

    function applyFilters() {
        const query = searchInput.value.trim().toLowerCase();
        const queryTokens = query.split(/\s+/); // split by spaces

        sections.forEach(sectionId => {
            const cards = document.querySelectorAll(`#${sectionId} > div`);
            let anyVisible = false;

            cards.forEach(card => {
                const name = card.dataset.name?.toLowerCase() || "";
                const brand = card.dataset.brand?.toLowerCase() || "";
                const ram = card.dataset.ram?.toLowerCase().replace('gb', '').trim() || "";  // Strip 'GB' and lower case RAM data
                const storage = card.dataset.storage?.toLowerCase() || "";

                const combined = `${name} ${brand} ${ram} ${storage}`;

                const matches = queryTokens.every(token => combined.includes(token));

                // Additional check for RAM filter
                const ramFilterValue = ramFilter.value.toLowerCase().replace('gb', '').trim();
                const ramMatches = ramFilterValue ? ram.includes(ramFilterValue) : true;

                // Additional check for Brand filter
                const brandFilterValue = brandFilter.value.toLowerCase();
                const brandMatches = brandFilterValue ? brand.includes(brandFilterValue) : true;

                if ((matches || queryTokens.length === 0) && ramMatches && brandMatches) {
                    card.classList.remove("hidden");
                    anyVisible = true;
                } else {
                    card.classList.add("hidden");
                }
            });

            // Optional: show/hide empty message
            const emptyMessage = document.getElementById(`${sectionId}-empty`);
            if (emptyMessage) {
                emptyMessage.classList.toggle("hidden", anyVisible);
            }
        });
    }

    // Event listeners for filters and search
    searchInput.addEventListener("input", applyFilters);
    brandFilter.addEventListener("change", applyFilters);
    ramFilter.addEventListener("change", applyFilters);

    // Sorting Logic
    sortSelect.addEventListener('change', () => {
        const sortValue = sortSelect.value;
        const section = document.querySelectorAll("#devCreatorsSection, #businessOfficeSection");
        section.forEach((section) => {
            let sortedLaptops = Array.from(section.children);
            sortedLaptops.sort((a, b) => {
                if (sortValue === "price-low-high") {
                    return parseFloat(a.dataset.price) - parseFloat(b.dataset.price);
                } else if (sortValue === "price-high-low") {
                    return parseFloat(b.dataset.price) - parseFloat(a.dataset.price);
                } else if (sortValue === "name-asc") {
                    return a.dataset.name.localeCompare(b.dataset.name);
                } else if (sortValue === "name-desc") {
                    return b.dataset.name.localeCompare(a.dataset.name);
                }
                return 0; // Default case
            });
            section.innerHTML = "";
            sortedLaptops.forEach(laptop => section.appendChild(laptop));
        });
    });

    applyFilters(); // Initial filter application
</script>
