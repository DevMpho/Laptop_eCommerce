@model IEnumerable<Laptops.Models.LaptopViewModel>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css" />
    <title>Laptop Exchange</title>
</head>
<body class="min-h-screen font-sans">

    @Html.Partial("_NavBar")

    @{
        var firstLaptop = Model.FirstOrDefault();
    }

    <!--Hero Section-->
    <div class="bg-gradient-to-b from-[#1F44BB] via-[#EEF3FF] to-white py-20 mt-[80px] mb-[20px]">
        <div class="flex flex-col md:flex-row items-center justify-center px-6 md:px-16 py-10 gap-10">
            <!-- Left Column -->
            <div class="md:w-1/2 text-center md:text-left space-y-6">
                <h1 class="text-4xl md:text-5xl font-bold text-gray-900">MintGroup Device Exchange</h1>
                <p class="text-lg text-gray-700">
                    Your trusted space to view pre-owned,
                    <span class="text-green-600 font-medium">IT-approved laptops</span>. Every device is verified. Every listing is limited.
                </p>
                <div class="relative max-w-md mx-auto md:mx-0">
                    <input type="text" id="searchInput" placeholder="Search by brand, RAM, or keyword..."
                           class="w-full pl-10 pr-4 py-2 rounded-full border border-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-500" />
                    <div class="absolute top-2.5 left-3 text-gray-400">
                        <i class="fas fa-search"></i>
                    </div>
                </div>
                <p class="text-sm text-gray-500 italic">MintGroup internal use only</p>
            </div>



            <!-- Right Column -->
            @if (firstLaptop != null)
            {
                <div class="md:w-1/2 bg-white rounded-2xl shadow-lg p-6 w-full max-w-md"
                     data-brand="@firstLaptop.Brand" data-ram="@firstLaptop.Ram" data-price="@firstLaptop.Price"
                     data-imgurl="@firstLaptop.ImgUrl" data-model="@firstLaptop.Model" data-storage="@firstLaptop.Storage"
                     data-screensize="@firstLaptop.ScreenSize" data-color="@firstLaptop.Color"
                     data-description="@firstLaptop.Description" data-laptopid="@firstLaptop.LaptopId" data-batterycondition="@firstLaptop.BatteryLife">

                    <img src="@Url.Content("~/" + firstLaptop.ImgUrl)" alt="@firstLaptop.Model" class="rounded-xl w-full object-contain h-52 mb-4" />

                    <h2 class="text-xl font-bold text-blue-700 mb-2">@firstLaptop.Brand @firstLaptop.Model</h2>
                    <p class="text-gray-700 flex items-center mb-1">
                        <i class="fas fa-microchip mr-2 text-gray-500"></i>
                        Gen Intel Core i5 with NVIDIA GeForce RTX 3050
                    </p>
                    <p class="text-gray-700 flex items-center mb-1">
                        <i class="fas fa-memory mr-2 text-purple-600"></i>
                        <span class="font-semibold text-purple-600">RAM:</span> @firstLaptop.Ram
                    </p>
                    <p class="text-gray-700 flex items-center mb-1">
                        <i class="fas fa-hdd mr-2 text-orange-500"></i>
                        <span class="font-semibold text-orange-500">Storage:</span> @firstLaptop.Storage
                    </p>
                    <p class="text-green-600 font-bold text-lg mt-2">R @firstLaptop.Price</p>
                    <button class="group mt-4 inline-flex items-center justify-center bg-[#73AC4B] text-white px-4 py-2 rounded-full view-details-btn hover:bg-blue-800 transition-all duration-300" >
                        View Details
                        <i class="fas fa-arrow-right transform transition-transform duration-300 group-hover:translate-x-1"></i>
                    </button>
                </div>
            }

        </div>
    </div>
	

    <!-- Filters & Sort Section -->
    <div class="max-w-7xl mx-auto mt-10 px-4">
        <!-- 🔽 FILTERS & SORT CONTROLS FOR LAPTOPS -->
        <div class="flex flex-wrap items-center justify-between gap-4 p-6 bg-white rounded-2xl shadow-md mb-6 border border-gray-200">
            <!-- Filters -->
            <div class="flex flex-wrap items-center gap-6">
                <div class="flex flex-col">
                    <label for="brand" class="text-sm font-semibold text-gray-700">Brand</label>
                    <select id="brandFilter" class="px-3 py-2 border rounded-md text-sm focus:ring-2 focus:ring-[#1F44BB]">
                        <option value="">All</option>
                        <option value="Lenovo">Lenovo</option>
                        <option value="Dell">Dell</option>

                    </select>
                </div>
                <div class="flex flex-col">
                    <label for="ram" class="text-sm font-semibold text-gray-700">RAM</label>
                    <select id="ramFilter" class="px-3 py-2 border rounded-md text-sm focus:ring-2 focus:ring-[#1F44BB]">
                        <option value="">All</option>
                        <option value="8GB">8GB</option>
                        <option value="16GB">16GB</option>
                        <option value="32GB">32GB</option>
                    </select>
                </div>

                <div class="flex flex-col">
                    <label for="role" class="text-sm font-semibold text-gray-700">Role</label>
                    <select id="roleFilter" class="px-3 py-2 border rounded-md text-sm focus:ring-2 focus:ring-[#1F44BB]">
                        <option value="">All</option>
                        <option value="Gamer">Gamer</option>
                        <option value="Business">Business</option>
                        <option value="Developer">Developer</option>
                        <option value="General Use">General Use</option>
                    </select>
                </div>
            </div>

            <!-- Sort -->
            <div class="flex flex-col">
                <label for="sort" class="text-sm font-semibold text-gray-700">Sort by</label>
                <select id="sortSelect" class="px-3 py-2 border rounded-md text-sm focus:ring-2 focus:ring-[#73AC4B]">
                    <option value="default">Default</option>
                    <option value="price-low-high">Price: Low to High</option>
                    <option value="price-high-low">Price: High to Low</option>
                    <option value="name-asc">Name: A-Z</option>
                    <option value="name-desc">Name: Z-A</option>
                </select>
            </div>
        </div>
    </div>


     <!-- Laptops Grid Section -->
     <div class="mt-16 px-6 md:px-16">
            <h2 class="text-2xl font-semibold text-gray-800 mb-6">All Available Laptops</h2>
            <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
                @{
    var statusMap = ViewBag.LaptopStatusMap as Dictionary<int, int> ?? new Dictionary<int, int>();
}

@foreach (var laptop in Model)
{
    var status = statusMap.ContainsKey(laptop.LaptopId) ? statusMap[laptop.LaptopId] : 0;
    var isGreyedOut =  status == 2 || status == 3;
    var statusText = status == 2 ? "Already ordered" : status == 3 ? "Reserved by another user" : "";
    var cardClasses = isGreyedOut ? "opacity-50 cursor-not-allowed pointer-events-none" : "";
    
    <div class="bg-white rounded-xl border shadow-md p-4 text-center laptop-card @cardClasses"
         data-laptopid="@laptop.LaptopId"
         data-brand="@laptop.Brand" data-ram="@laptop.Ram" data-price="@laptop.Price"
         data-imgurl="@laptop.ImgUrl" data-model="@laptop.Model" data-storage="@laptop.Storage"
         data-screensize="@laptop.ScreenSize" data-color="@laptop.Color"
         data-description="@laptop.Description" data-batterycondition="@laptop.BatteryLife"
         data-role="@laptop.Role" data-existsincart="@laptop.IsInCart">

        <img src="@Url.Content("~/" + laptop.ImgUrl)" alt="@laptop.Model"
             class="w-full h-36 object-contain mb-4 rounded" />

        <div class="flex flex-wrap gap-2 justify-center mb-3">
            <span class="bg-[#73AC4B] text-white text-xs font-semibold px-3 py-1 rounded-full">@laptop.Brand</span>
            <span class="bg-blue-700 text-white text-xs font-semibold px-3 py-1 rounded-full">@laptop.Ram</span>
            <span class="bg-blue-700 text-white text-xs font-semibold px-3 py-1 rounded-full">@laptop.Storage</span>
        </div>

        <h3 class="text-base font-medium text-gray-800">@laptop.Brand @laptop.Model</h3>
        <p class="text-lg font-bold text-blue-700 mt-1">R @laptop.Price</p>

                    @if (!string.IsNullOrEmpty(statusText))
                    {
                        <p class="text-sm font-semibold text-red-600 mt-2">@statusText</p>
                    }
                    else if (status == 1)
                    {
                        <button class="group mt-4 mx-auto block w-40 text-center text-white px-5 py-2.5 rounded-full"
                                style="background-color: grey; cursor: not-allowed;"
                                disabled>
                            Already In Cart
                        </button>
                    }
                    else
                    {
                        <button class="group mt-4 mx-auto block w-40 text-center bg-[#73AC4B] text-white px-5 py-2.5 rounded-full view-details-btn hover:bg-blue-800 transition-all duration-300"
                                data-laptopid="@laptop.LaptopId">
                            View Details
                            <i class="fas fa-arrow-right ml-2 transform transition-transform duration-300 group-hover:translate-x-1"></i>
                        </button>

                    }

    </div>
}

        </div>
    </div>


    <!-- Modal Structure -->
    <div id="detailsModal" class="fixed inset-0 hidden bg-black bg-opacity-50 flex items-center justify-center z-50 overflow-y-auto">
        <div class="bg-white p-6 md:p-10 rounded-xl shadow-xl max-w-4xl w-full relative space-y-4">
            <button id="closeModal" class="absolute top-2 right-2 text-gray-400 hover:text-red-500 text-2xl">&times;</button>

            <!-- Title -->
            <h2 id="modalTitle" class="text-2xl md:text-4xl font-bold text-gray-800 text-center"></h2>

            <div class="flex flex-col md:flex-row gap-8">
                <!-- Left Column (Images) -->
                <div class="md:w-1/2">
                    <div class="relative mb-4">
                        <img id="modalMainImage" src="" alt="Laptop Main" class="w-full h-80 object-cover rounded">
                    </div>
                    <div class="flex space-x-3" id="thumbnailContainer">
                        <!-- First thumbnail comes from the laptop data -->
                        <img id="firstThumb" src="" alt="Thumb 1"
                             class="thumbnail-img w-20 h-20 object-cover rounded border-2 border-transparent cursor-pointer hover:scale-105 transition">

                        <!-- Hardcoded thumbnails -->
                        <img src="/images/howard-bouchevereau-RSCirJ70NDM-unsplash.jpg" alt="Thumb 2"
                             class="thumbnail-img w-20 h-20 object-cover rounded border-2 border-transparent cursor-pointer hover:scale-105 transition">

                        <img src="/images/istockphoto-1429128304-612x612.jpg" alt="Thumb 3"
                             class="thumbnail-img w-20 h-20 object-cover rounded border-2 border-transparent cursor-pointer hover:scale-105 transition">

                        <img src="/images/istockphoto-184735890-612x612.jpg" alt="Thumb 4"
                             class="thumbnail-img w-20 h-20 object-cover rounded border-2 border-transparent cursor-pointer hover:scale-105 transition">
                    </div>


                </div>

                <!-- Right Column (Details) -->
                <div class="md:w-1/2 text-base">


                    <!-- Specs Grid -->
                    <div class="grid grid-cols-2 gap-4 text-gray-700 mt-4">
                        <div><i class="fas fa-memory text-blue-600 mr-2"></i><strong>RAM:</strong> <span id="modalRam"></span></div>
                        <div><i class="fas fa-hdd text-purple-600 mr-2"></i><strong>Storage:</strong> <span id="modalStorage"></span></div>
                        <div><i class="fas fa-laptop text-indigo-600 mr-2"></i><strong>Screen Size:</strong> <span id="modalScreenSize"></span></div>
                        <div><i class="fas fa-palette text-pink-500 mr-2"></i><strong>Color:</strong> <span id="modalColor"></span></div>
                        <div><i class="fas fa-tachometer-alt text-gray-600 mr-2"></i><strong>Battery Condition:</strong> <span id="modalBatteryCondition" class="font-semibold px-2 py-1 rounded text-sm"></span></div>
                        <div id="modalRoleContainer">
                            <i id="modalRoleIcon" class="mr-2"></i><strong>Role:</strong> <span id="modalRole"></span>
                        </div>

                    </div>

                    <!-- Description -->
                    <div class="mt-4">
                        <p class="text-gray-800 text-sm"><strong>Description:</strong></p>
                        <p id="modalDescription" class="text-gray-600 text-sm mt-1"></p>
                    </div>


                    <!-- Pricing and Actions -->
                    <div class="bg-white rounded-lg shadow p-6 mt-12">
                        <!-- Price -->
                        <div class=" text-2xl font-bold text-green-600 mt-2">
                            R <span id="modalPrice"></span>
                        </div>

                        <!-- Buttons -->
                        <div class="mt-6 grid grid-cols-1 sm:grid-cols-2 gap-4">
                            <a asp-action="Display"
                               class="block md:hidden text-center border border-green-600 text-green-600 py-2 rounded-md font-semibold hover:bg-red-50 flex items-center justify-center gap-2">
                                <i class="fas fa-arrow-left"></i> Back To Home
                            </a>

                            <button id="addToCartBtn" 
                                    class="text-center bg-green-600 text-white py-2 rounded-md font-semibold hover:bg-green-700 flex items-center justify-center gap-2">
                                <i class="fas fa-shopping-cart"></i> Add to Cart
                            </button>

                        </div>

                    </div>
                </div>
            </div>
        </div>
    </div>


    <div class="mt-20">
        @Html.Partial("footer")
    </div>

    <script>
             document.addEventListener("DOMContentLoaded", () => {
            const brandFilter = document.getElementById("brandFilter");
            const ramFilter = document.getElementById("ramFilter");
            const roleFilter = document.getElementById("roleFilter");
            const sortSelect = document.getElementById("sortSelect");
            const searchInput = document.getElementById("searchInput");
            const laptopCards = document.querySelectorAll(".laptop-card");

            const modal = document.getElementById("detailsModal");
            const closeModal = document.getElementById("closeModal");

            const modalTitle = document.getElementById("modalTitle");
            const modalMainImage = document.getElementById("modalMainImage");
            const modalRam = document.getElementById("modalRam");
            const modalStorage = document.getElementById("modalStorage");
            const modalScreenSize = document.getElementById("modalScreenSize");
            const modalColor = document.getElementById("modalColor");
            const modalBatteryCondition = document.getElementById("modalBatteryCondition");
            const modalDescription = document.getElementById("modalDescription");
            const modalPrice = document.getElementById("modalPrice");
            const firstThumb = document.getElementById("firstThumb");

            const modalRole = document.getElementById("modalRole");
            const modalRoleIcon = document.getElementById("modalRoleIcon");

            const viewButtons = document.querySelectorAll(".view-details-btn"); // <-- Added here

            function filterAndSort() {
                // Debug log
                console.log("Filtering and sorting...");

                const brand = brandFilter.value.toLowerCase();
                const ram = ramFilter.value.toLowerCase();
                const role = roleFilter.value.toLowerCase();
                const search = searchInput.value.toLowerCase();

                const sortedCards = Array.from(laptopCards);

                sortedCards.forEach(card => {
                    const cardBrand = card.dataset.brand.toLowerCase();
                    const cardRam = card.dataset.ram.toLowerCase();
                    const cardModel = card.dataset.model.toLowerCase();
                    const cardRole = (card.dataset.role || "").toLowerCase();
                    const cardStorage = card.dataset.storage.toLowerCase();

                    const matchesBrand = !brand || cardBrand.includes(brand);
                    const matchesRam = !ram || cardRam.includes(ram);
                    const matchesRole = !role || cardRole.includes(role);
                    const matchesSearch = !search ||
                        cardBrand.includes(search) ||
                        cardRam.includes(search) ||
                        cardModel.includes(search) ||
                        cardStorage.includes(search);

                    card.style.display = (matchesBrand && matchesRam && matchesSearch && matchesRole) ? "block" : "none";
                });

                // Sorting
                const container = document.querySelector(".grid");
                let sorted = [...sortedCards].filter(card => card.style.display !== "none");

                switch (sortSelect.value) {
                    case "price-low-high":
                        sorted.sort((a, b) => parseFloat(a.dataset.price) - parseFloat(b.dataset.price));
                        break;
                    case "price-high-low":
                        sorted.sort((a, b) => parseFloat(b.dataset.price) - parseFloat(a.dataset.price));
                        break;
                    case "name-asc":
                        sorted.sort((a, b) => a.dataset.model.localeCompare(b.dataset.model));
                        break;
                    case "name-desc":
                        sorted.sort((a, b) => b.dataset.model.localeCompare(a.dataset.model));
                        break;
                }

                sorted.forEach(card => container.appendChild(card)); // Reorder DOM
            }

            brandFilter.addEventListener("change", filterAndSort);
            ramFilter.addEventListener("change", filterAndSort);
            roleFilter.addEventListener("change", filterAndSort);
            sortSelect.addEventListener("change", filterAndSort);
            searchInput.addEventListener("input", filterAndSort);

            // Modal logic
            const addToCartBtn = document.getElementById('addToCartBtn');
            viewButtons.forEach(btn => {
                btn.addEventListener("click", () => {
                    const card = btn.closest(".laptop-card");
                    modalTitle.textContent = `${card.dataset.brand} ${card.dataset.model}`;
                    modalMainImage.src = "/" + card.dataset.imgurl;
                    modalRam.textContent = card.dataset.ram;
                    modalStorage.textContent = card.dataset.storage;
                    modalScreenSize.textContent = card.dataset.screensize;
                    modalColor.textContent = card.dataset.color;
                    modalBatteryCondition.textContent = card.dataset.batterycondition;
                    modalDescription.textContent = card.dataset.description;
                    modalPrice.textContent = card.dataset.price;
                    firstThumb.src = "/" + card.dataset.imgurl;
                    const laptopId = card.dataset.laptopid;
                    addToCartBtn.setAttribute('data-laptop-id', laptopId);

                    card.id = 'laptop-card+'+laptopId;

                    if (card.dataset.existsincart === 'True') {
                        addToCartBtn.disabled = true;
                        addToCartBtn.textContent = 'Already In Cart';
                        addToCartBtn.style.backgroundColor = 'grey';
                        addToCartBtn.style.cursor = 'not-allowed';
                    } else {
                        addToCartBtn.disabled = false;
                        addToCartBtn.textContent = 'Add to Cart';
                        addToCartBtn.style.cursor = 'pointer';
                        addToCartBtn.style.backgroundColor = 'rgb(115 172 75 / var(--tw-bg-opacity, 1))';
                        addToCartBtn.className = "text-center bg-green-600 text-white py-2 rounded-md font-semibold hover:bg-green-700 flex items-center justify-center gap-2";
                    }

                    // ✅ Set Role and Icon
                    const role = card.dataset.role;
                    modalRole.textContent = role;

                    let iconClass = "";
                    let colorClass = "";

                    switch (role.toLowerCase()) {
                        case "gamer":
                            iconClass = "fas fa-gamepad";
                            colorClass = "text-red-500";
                            break;
                        case "business":
                            iconClass = "fas fa-briefcase";
                            colorClass = "text-green-600";
                            break;
                        case "developer":
                            iconClass = "fas fa-code";
                            colorClass = "text-yellow-500";
                            break;
                        case "general use":
                            iconClass = "fas fa-users";
                            colorClass = "text-gray-500";
                            break;
                        default:
                            iconClass = "fas fa-laptop";
                            colorClass = "text-gray-400";
                    }

                    modalRoleIcon.className = `${iconClass} ${colorClass} mr-2`;

                    modal.classList.remove("hidden");
                });
            });

            closeModal.addEventListener("click", () => {
                modal.classList.add("hidden");
            });

            window.addEventListener("click", (e) => {
                if (e.target === modal) {
                    modal.classList.add("hidden");
                }
            });

            // Thumbnail click to update main image
            document.querySelectorAll(".thumbnail-img").forEach(thumb => {
                thumb.addEventListener("click", function () {
                    modalMainImage.src = this.src;
                });
            });
        });
         

        // add to cart
        addToCartBtn.addEventListener('click', function () {
            const laptopId = this.getAttribute('data-laptop-id');

            if (!laptopId) {
                alert("Laptop ID is missing.");
                return;
            }

            const button = this;
            const originalText = button.textContent;
            button.textContent = "Adding...";
            button.disabled = true;

            fetch(`/Cart/AddToCart?laptopId=${laptopId}`, {
                method: 'POST'
            })
                .then(res => {
                    if (res.ok) {
                        updateCartCount();
                        // Wait 1 second before changing to "Added"
                        setTimeout(() => {
                            button.textContent = "Already In Cart";
                            button.style.backgroundColor = 'grey';
                            button.style.cursor = 'not-allowed';
                            button.disabled = true;

                            // Disable item from being to cart again
                            const card = document.getElementById('laptop-card+' + laptopId);
                            if (card) {
                                card.setAttribute('data-existsincart', 'True');
                            }
                        }, 1000);
                    } else {
                        button.textContent = "Failed";
                        setTimeout(() => {
                            button.textContent = originalText;
                            button.disabled = false;
                        }, 2000);
                    }
                })
                .catch(() => {
                    button.textContent = "Error";
                    setTimeout(() => {
                        button.textContent = originalText;
                        button.disabled = false;
                    }, 2000);
                });
        });
            function markLaptopAsInCart(laptopId) {
            const card = document.querySelector(`[data-laptopid="${laptopId}"]`)?.closest('.laptop-card');
            const button = document.querySelector(`.view-details-btn[data-laptopid="${laptopId}"]`);

            if (button) {
                const disabledButton = document.createElement('button');
                disabledButton.textContent = 'Already In Cart';
                disabledButton.className = 'group mt-4 mx-auto block w-40 text-center text-white px-5 py-2.5 rounded-full';
                disabledButton.style.backgroundColor = 'grey';
                disabledButton.style.cursor = 'not-allowed';
                disabledButton.disabled = true;

                button.replaceWith(disabledButton);
            }

            // Optional: visually dim the card
            if (card) {
                card.classList.add('opacity-50', 'cursor-not-allowed', 'pointer-events-none');
            }
        }
    </script>


</body>
</html>