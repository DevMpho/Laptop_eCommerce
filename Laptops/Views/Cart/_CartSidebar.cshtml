@model List<Laptops.Models.cart_items>

@{
    int totalPrice = 0;
    int totalItems = Model?.Count ?? 0;
}

@if (Model != null && Model.Count > 0)
{
    <div class="p-4 space-y-4">
        <h2 class="text-lg font-semibold mb-4">You have (@totalItems items) in your cart</h2>

        @foreach (var item in Model)
        {
            if (item.Laptop != null && item.Laptop.LaptopDetails != null)
            {
                totalPrice += item.Laptop.price;

                <div class="flex items-center justify-between bg-white rounded-lg shadow p-2">
                    <div class="flex items-center space-x-4">
                        <img src="@Url.Content("~/" + item.Laptop.imgUrl)" alt="Laptop Image" class="w-16 h-16 object-cover rounded" />
                        <div>
                            <div class="font-semibold text-gray-800">@item.Laptop.LaptopDetails.brand @item.Laptop.LaptopDetails.model</div>
                            <div class="text-sm text-gray-500">
                                @item.Laptop.LaptopDetails.storage GB / @item.Laptop.LaptopDetails.ram GB
                            </div>
                            <div class="text-sm font-bold text-green-600">R @item.Laptop.price</div>
                        </div>
                    </div>

                    <form method="post" class="remove-from-cart-form" asp-action="RemoveFromCart" asp-route-id="@item.cartitems_id">
                        <button type="submit" title="Remove" class="text-red-500 hover:text-red-700">
                            <i class="fas fa-trash-alt"></i>
                        </button>
                    </form>

                </div>
            }
        }

        <div class="text-right">
            <div class="text-sm text-gray-600">Total:</div>
            <div class="text-lg font-bold text-green-700">R @totalPrice</div>

            <form method="post" asp-controller="Cart" asp-action="Orders" id="placeOrderForm">
                <input type="hidden" name="totalAmount" value="@totalPrice" />
                <button type="submit" class="bg-blue-600 hover:bg-blue-700 text-white font-semibold py-2 px-4 rounded mt-4">
                    Request
                </button>
            </form>


        </div>


    </div>
}
else
{
    <p class="text-gray-500 p-4">Your cart is empty.</p>
}


<script>
    // Function to update the cart count badge
    function updateCartCount() {
        fetch('/Cart/GetCartCount')
            .then(response => response.json())
            .then(data => {
                const countElem = document.getElementById('cart-count');
                if (countElem) {
                    countElem.textContent = data.count;
                }
            })
            .catch(err => console.error('Failed to update cart count', err));
    }

    document.addEventListener('DOMContentLoaded', function () {

        // Remove-from-cart dynamic submit handler
        document.body.addEventListener('submit', function (e) {
            if (e.target.classList.contains('remove-from-cart-form')) {
                e.preventDefault();

                const form = e.target;
                const url = form.action;
                const formData = new FormData(form);

                fetch(url, {
                    method: 'POST',
                    body: formData
                })
                .then(response => response.text())
                .then(html => {
                    // Update the sidebar content with new cart items
                    const sidebar = document.getElementById('sidebar-content');
                    if (sidebar) {
                        sidebar.innerHTML = html;
                    }
                    // Update the cart count badge
                    updateCartCount();
                })
                .catch(err => console.error('Error removing item:', err));
            }
        });

        // Place order form submit handler
        const placeOrderForm = document.getElementById('placeOrderForm');
        if (placeOrderForm) {
            placeOrderForm.addEventListener('submit', function (e) {
                e.preventDefault();

                const form = e.target;
                const url = form.action;
                const formData = new FormData(form);

                fetch(url, {
                    method: 'POST',
                    body: formData
                })
                .then(response => {
                    if (response.ok) {
                        return response.json();  // Expecting JSON response
                    }
                    throw new Error('Network response was not ok.');
                })
                .then(data => {
                    alert(data.message || 'Order placed successfully!');
                    updateCartCount();

                    // Optionally reload page or redirect
                    // location.reload();
                    // or window.location.href = '/Home/Orders';
                })
                .catch(err => console.error('Error placing order:', err));
            });
        }

        // Initial cart count update on page load
        updateCartCount();
    });
</script>


