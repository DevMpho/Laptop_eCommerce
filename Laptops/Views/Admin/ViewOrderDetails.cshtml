@model Laptops.Models.OrderDetailsViewModel

@{
    ViewData["Title"] = "Order Details";
}
@{
    var statuses = new Dictionary<int, string> {
        {1, "Pending"},
        {2, "Processing"},
        {3, "Approved"},
        {4, "Pickup"}
    };
}

<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        .popup {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            z-index: 1000;
            transition: all 0.3s ease;
        }
        .popup-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            z-index: 999;
        }
    </style>
</head>
@Html.Partial("_MspNavBar")

<div class="max-w-5xl mx-auto px-4 py-8">
    <h2 class="text-2xl font-bold mb-6">Order Details - #@Model.OrderId</h2>

    <!-- Employee Details -->
    <div class="bg-white rounded-lg shadow p-6 mb-6">
        <h3 class="text-xl font-semibold mb-4 text-gray-800">Employee Info</h3>
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div><strong>Name:</strong> @Model.EmployeeName</div>
            <div><strong>Email:</strong> @Model.Email</div>
            <div><strong>Contact Number:</strong> @Model.ContactNumber</div>
        </div>
    </div>

    <!-- Order Details -->
    <div class="bg-white rounded-lg shadow p-6 mb-6">
        <h3 class="text-xl font-semibold mb-4 text-gray-800">Order Info</h3>
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div><strong>Order Date:</strong> @Model.OrderDate.ToString("yyyy-MM-dd")</div>
            <div>
                <strong>Status:</strong>
                <select class="border border-gray-300 rounded px-2 py-1"
                        onchange="updateStatus(@Model.OrderId, this.value)">
                    @foreach (var status in statuses)
                    {
                        if (Model.OrderStatusId == status.Key)
                        {
                            <option value="@status.Key" selected>@status.Value</option>
                        }
                        else
                        {
                            <option value="@status.Key">@status.Value</option>
                        }
                    }
                </select>
            </div>

            <div><strong>Total Amount:</strong> R @Model.TotalAmount</div>
        </div>
    </div>

    <!-- Laptop(s) Details -->
    <div class="bg-white rounded-lg shadow p-6">
        <h3 class="text-xl font-semibold mb-4 text-gray-800">Laptops in this Order</h3>
        @if (Model.Laptops != null && Model.Laptops.Count > 0)
        {
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                @foreach (var laptop in Model.Laptops)
                {
                    <div class="border rounded-lg p-4 shadow">
                        <img src="@Url.Content("~/" + laptop.ImgUrl)" alt="@laptop.Model"
                             class="w-full h-36 object-contain mb-4 rounded" />
                        <div><strong>Brand:</strong> @laptop.Brand</div>
                        <div><strong>Model:</strong> @laptop.Model</div>
                        <div><strong>Storage:</strong> @laptop.Storage</div>
                        <div><strong>RAM:</strong> @laptop.Ram</div>
                        <div><strong>Screen Size:</strong> @laptop.ScreenSize</div>
                        <div><strong>Color:</strong> @laptop.Color</div>
                        <div><strong>Battery Life:</strong> @laptop.BatteryLife hours</div>
                        <div><strong>Price:</strong> R @laptop.Price</div>
                    </div>
                }
            </div>
        }
        else
        {
            <p class="text-gray-500">No laptops linked to this order.</p>
        }
    </div>
</div>

<!-- Popup Messages -->
<div id="popup-overlay" class="popup-overlay hidden" onclick="closePopup()"></div>
<div id="popup" class="popup bg-white rounded-lg shadow-xl p-6 max-w-sm w-full mx-4 hidden">
    <div class="flex items-center mb-4">
        <div id="popup-icon" class="mr-3 flex-shrink-0"></div>
        <h3 id="popup-title" class="text-lg font-semibold text-gray-900"></h3>
    </div>
    <p id="popup-message" class="text-gray-600 mb-4"></p>
    <button onclick="closePopup()" class="w-full bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-4 rounded-md transition duration-200">
        OK
    </button>
</div>

@Html.AntiForgeryToken()
<script>
    function showPopup(title, message, isSuccess = true) {
        const popup = document.getElementById('popup');
        const overlay = document.getElementById('popup-overlay');
        const titleEl = document.getElementById('popup-title');
        const messageEl = document.getElementById('popup-message');
        const iconEl = document.getElementById('popup-icon');

        titleEl.textContent = title;
        messageEl.textContent = message;

        // Set icon and colors based on success/error
        if (isSuccess) {
            iconEl.innerHTML = `
                    <div class="w-8 h-8 bg-green-100 rounded-full flex items-center justify-center">
                        <svg class="w-5 h-5 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                        </svg>
                    </div>
                `;
        } else {
            iconEl.innerHTML = `
                    <div class="w-8 h-8 bg-red-100 rounded-full flex items-center justify-center">
                        <svg class="w-5 h-5 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                        </svg>
                    </div>
                `;
        }

        overlay.classList.remove('hidden');
        popup.classList.remove('hidden');
    }

    function closePopup() {
        const popup = document.getElementById('popup');
        const overlay = document.getElementById('popup-overlay');

        overlay.classList.add('hidden');
        popup.classList.add('hidden');
    }

    function updateStatus(orderId, newStatusId) {
        fetch(`/Admin/UpdateOrderStatus`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
            },
            body: JSON.stringify({
                orderId: orderId,
                newStatusId: parseInt(newStatusId)
            })
        })
            .then(response => {
                if (response.ok) {
                    showPopup('Success!', 'Order status updated successfully!', true);
                } else {
                    showPopup('Error', 'Failed to update order status.', false);
                }
            })
            .catch(() => {
                showPopup('Error', 'Error updating order status.', false);
            });
    }
</script>